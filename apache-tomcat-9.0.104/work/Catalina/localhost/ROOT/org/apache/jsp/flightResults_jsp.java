/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-04-28 20:46:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class flightResults_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String departureAirport = request.getParameter("departureAirport");
    String arrivalAirport = request.getParameter("arrivalAirport");
    String tripType = request.getParameter("tripType");
    String departureDate = request.getParameter("departureDate");
    String flexibleDates = request.getParameter("flexibleDates");
    String arrivalDate = request.getParameter("arrivalDate");

    // Sorting/Filtering parameters
    String sortBy = request.getParameter("sortBy");
    String airlineFilter = request.getParameter("airlineFilter");
    String priceMin = request.getParameter("priceMin");
    String priceMax = request.getParameter("priceMax");

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/airlineproj", "root", "parshva123");

        String sql = "SELECT f.flightID, f.flightNum, f.departure, f.arrival, f.domestic, f.daysOfWeek, " +
                     "TIMESTAMPDIFF(MINUTE, f.departure, f.arrival) AS duration, " +
                     "a1.name AS depAirport, a2.name AS arrAirport, al.name AS airline, f.baseFare " +
                     "FROM Flight f " +
                     "JOIN AirportFlight_DepartsFrom afd ON f.flightID = afd.flightID " +
                     "JOIN Airport a1 ON afd.airportID = a1.airportID " +
                     "JOIN AirportFlight_ArrivesAt afa ON f.flightID = afa.flightID " +
                     "JOIN Airport a2 ON afa.airportID = a2.airportID " +
                     "JOIN Airline al ON f.airlineID = al.airlineID " +
                     "WHERE a1.name = ? AND a2.name = ? ";

        if ("on".equals(flexibleDates)) {
            sql += "AND f.departureDate BETWEEN DATE_SUB(?, INTERVAL 3 DAY) AND DATE_ADD(?, INTERVAL 3 DAY) ";
        } else {
            sql += "AND f.departureDate = ? ";
        }

        if (airlineFilter != null && !airlineFilter.isEmpty()) {
            sql += "AND al.name = ? ";
        }

        if (priceMin != null && !priceMin.isEmpty()) {
            sql += "AND f.baseFare >= ? ";
        }

        if (priceMax != null && !priceMax.isEmpty()) {
            sql += "AND f.baseFare <= ? ";
        }

        if (sortBy != null) {
            if (sortBy.equals("price")) sql += "ORDER BY f.baseFare ASC ";
            else if (sortBy.equals("departure")) sql += "ORDER BY f.departure ASC ";
            else if (sortBy.equals("arrival")) sql += "ORDER BY f.arrival ASC ";
            else if (sortBy.equals("duration")) sql += "ORDER BY duration ASC ";
        }

        pstmt = conn.prepareStatement(sql);
        int paramIndex = 1;
        pstmt.setString(paramIndex++, departureAirport);
        pstmt.setString(paramIndex++, arrivalAirport);
        pstmt.setString(paramIndex++, departureDate);
        if ("on".equals(flexibleDates)) {
            pstmt.setString(paramIndex++, departureDate);
        }
        if (airlineFilter != null && !airlineFilter.isEmpty()) {
            pstmt.setString(paramIndex++, airlineFilter);
        }
        if (priceMin != null && !priceMin.isEmpty()) {
            pstmt.setFloat(paramIndex++, Float.parseFloat(priceMin));
        }
        if (priceMax != null && !priceMax.isEmpty()) {
            pstmt.setFloat(paramIndex++, Float.parseFloat(priceMax));
        }

        rs = pstmt.executeQuery();

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>Available Flights</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h2>Flights from ");
      out.print( departureAirport );
      out.write(" to ");
      out.print( arrivalAirport );
      out.write("</h2>\n");
      out.write("\n");
      out.write("    <!-- Filtering and Sorting Form -->\n");
      out.write("    <form action=\"flightResults.jsp\" method=\"get\">\n");
      out.write("        <input type=\"hidden\" name=\"departureAirport\" value=\"");
      out.print( departureAirport );
      out.write("\">\n");
      out.write("        <input type=\"hidden\" name=\"arrivalAirport\" value=\"");
      out.print( arrivalAirport );
      out.write("\">\n");
      out.write("        <input type=\"hidden\" name=\"departureDate\" value=\"");
      out.print( departureDate );
      out.write("\">\n");
      out.write("        <input type=\"hidden\" name=\"flexibleDates\" value=\"");
      out.print( flexibleDates );
      out.write("\">\n");
      out.write("\n");
      out.write("        Airline: <input type=\"text\" name=\"airlineFilter\" value=\"");
      out.print( airlineFilter != null ? airlineFilter : "" );
      out.write("\">\n");
      out.write("        Price Min: <input type=\"text\" name=\"priceMin\" value=\"");
      out.print( priceMin != null ? priceMin : "" );
      out.write("\">\n");
      out.write("        Price Max: <input type=\"text\" name=\"priceMax\" value=\"");
      out.print( priceMax != null ? priceMax : "" );
      out.write("\">\n");
      out.write("        Sort By:\n");
      out.write("        <select name=\"sortBy\">\n");
      out.write("            <option value=\"\">-- Select --</option>\n");
      out.write("            <option value=\"price\">Price</option>\n");
      out.write("            <option value=\"departure\">Take-off Time</option>\n");
      out.write("            <option value=\"arrival\">Landing Time</option>\n");
      out.write("            <option value=\"duration\">Duration</option>\n");
      out.write("        </select>\n");
      out.write("        <input type=\"submit\" value=\"Apply Filters\">\n");
      out.write("    </form>\n");
      out.write("\n");
      out.write("    <!-- Flight Results Table -->\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <tr>\n");
      out.write("            <th>Flight Number</th>\n");
      out.write("            <th>Departure Time</th>\n");
      out.write("            <th>Arrival Time</th>\n");
      out.write("            <th>Duration (min)</th>\n");
      out.write("            <th>Airline</th>\n");
      out.write("            <th>Price</th>\n");
      out.write("            <th>Reserve</th>\n");
      out.write("        </tr>\n");
      out.write("        ");

            while(rs.next()) {
        
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print( rs.getString("flightNum") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getTime("departure") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getTime("arrival") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getInt("duration") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getString("airline") );
      out.write("</td>\n");
      out.write("            ");

                float fare = rs.getFloat("baseFare");
            
      out.write("\n");
      out.write("            <td>");
      out.print( fare > 0 ? "$" + String.format("%.2f", fare) : "N/A" );
      out.write("</td>\n");
      out.write("            <td><a href=\"reserveFlight.jsp?flightID=");
      out.print( rs.getInt("flightID") );
      out.write("\">Reserve</a></td>\n");
      out.write("        </tr>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("    </table>\n");
      out.write("\n");
      out.write("    <p><a href=\"welcome.jsp\">Back to Home</a></p>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");

    } catch(Exception e) {
        out.println("Error: " + e.getMessage());
        e.printStackTrace();
    } finally {
        if(rs != null) try { rs.close(); } catch(Exception e) {}
        if(pstmt != null) try { pstmt.close(); } catch(Exception e) {}
        if(conn != null) try { conn.close(); } catch(Exception e) {}
    }

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
