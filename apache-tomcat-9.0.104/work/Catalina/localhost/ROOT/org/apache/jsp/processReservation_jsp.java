/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-04-28 21:22:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class processReservation_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String firstName = (String) session.getAttribute("firstName");
    if (firstName == null) {
        response.sendRedirect("index.jsp");
    }

    String flightID = request.getParameter("flightID");
    String seat = request.getParameter("seat");
    String classType = request.getParameter("class");
    String passengerName = request.getParameter("passengerName");
    int numSeats = Integer.parseInt(request.getParameter("numSeats"));
    double totalFare = Double.parseDouble(request.getParameter("totalFare"));

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/airlineproj", "root", "parshva123");

        int passengerID = 1; // demo hardcoded
        int accountID = 101; // demo hardcoded

        // 1. Check capacity
        PreparedStatement capStmt = conn.prepareStatement("SELECT capacity FROM Flight WHERE flightID = ?");
        capStmt.setInt(1, Integer.parseInt(flightID));
        rs = capStmt.executeQuery();
        int capacity = 0;
        if (rs.next()) {
            capacity = rs.getInt("capacity");
        }
        rs.close();
        capStmt.close();

        // 2. Count current bookings
        PreparedStatement countStmt = conn.prepareStatement("SELECT COUNT(*) AS bookedSeats FROM FlightTicket WHERE flightID = ?");
        countStmt.setInt(1, Integer.parseInt(flightID));
        rs = countStmt.executeQuery();
        int bookedSeats = 0;
        if (rs.next()) {
            bookedSeats = rs.getInt("bookedSeats");
        }
        rs.close();
        countStmt.close();

        boolean addedToWaitlist = false;

        if (bookedSeats + numSeats <= capacity) {
            // 3. Proceed with reservation
            String sql = "INSERT INTO FlightTicket (seat, class, passengerName, passengerID, purchaseDateTime, requestDateTime, totalFare, flightID, accountID) VALUES (?, ?, ?, ?, NOW(), NOW(), ?, ?, ?)";
            for (int i = 0; i < numSeats; i++) {
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, seat + (i+1)); // simple seat labeling like A1, A2, etc.
                pstmt.setString(2, classType);
                pstmt.setString(3, passengerName);
                pstmt.setInt(4, passengerID);
                pstmt.setDouble(5, totalFare / numSeats); // divide fare per seat
                pstmt.setInt(6, Integer.parseInt(flightID));
                pstmt.setInt(7, accountID);
                pstmt.executeUpdate();
                pstmt.close();
            }
        } else {
            // 4. Add to waitlist
            PreparedStatement waitlistStmt = conn.prepareStatement("INSERT INTO CustomerAccountFlight_WaitsFor (accountID, seat, requestDateTime, flightID) VALUES (?, ?, NOW(), ?)");
            waitlistStmt.setInt(1, accountID);
            waitlistStmt.setString(2, seat); // could label better for multiple seats
            waitlistStmt.setInt(3, Integer.parseInt(flightID));
            waitlistStmt.executeUpdate();
            waitlistStmt.close();
            addedToWaitlist = true;
        }

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head><title>Reservation Status</title></head>\n");
      out.write("<body>\n");
      out.write("    <h2>\n");
      out.write("    ");

        if (!addedToWaitlist) {
    
      out.write("\n");
      out.write("        Reservation Confirmed!\n");
      out.write("    ");

        } else {
    
      out.write("\n");
      out.write("        Flight Full - Waitlisted\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("    </h2>\n");
      out.write("\n");
      out.write("    <p>Flight ID: ");
      out.print( flightID );
      out.write("</p>\n");
      out.write("    <p>Passenger: ");
      out.print( passengerName );
      out.write("</p>\n");
      out.write("    <p>Total Seats Requested: ");
      out.print( numSeats );
      out.write("</p>\n");
      out.write("    <p>Total Fare: $");
      out.print( totalFare );
      out.write("</p>\n");
      out.write("\n");
      out.write("    ");

        if (addedToWaitlist) {
    
      out.write("\n");
      out.write("        <p style=\"color:red;\">The flight was full. You have been added to the waitlist.</p>\n");
      out.write("    ");

        } else {
    
      out.write("\n");
      out.write("        <p style=\"color:green;\">Thank you for your reservation!</p>\n");
      out.write("    ");

        }
    
      out.write("\n");
      out.write("\n");
      out.write("    <p><a href=\"welcome.jsp\">Back to Home</a></p>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");

    } catch(Exception e) {
        out.println("<p>Error: " + e.getMessage() + "</p>");
        e.printStackTrace();
    } finally {
        if(rs != null) try { rs.close(); } catch(Exception e) {}
        if(pstmt != null) try { pstmt.close(); } catch(Exception e) {}
        if(conn != null) try { conn.close(); } catch(Exception e) {}
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
