/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-04-28 21:10:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class reservationsReport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

    String name = (String) session.getAttribute("firstName");
    String role = (String) session.getAttribute("role");

    if (name == null || !"admin".equalsIgnoreCase(role)) {
        response.sendRedirect("index.jsp");
    }

    String searchFlight = request.getParameter("flightNum");
    String searchCustomer = request.getParameter("customerName");

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head><title>Reservations Report</title></head>\n");
      out.write("<body>\n");
      out.write("    <h2>Reservations Report</h2>\n");
      out.write("    <p><a href=\"adminWelcome.jsp\">Back to Admin Dashboard</a></p>\n");
      out.write("\n");
      out.write("    <form method=\"get\" action=\"reservationsReport.jsp\">\n");
      out.write("        Search by Flight Number: <input type=\"text\" name=\"flightNum\" value=\"");
      out.print( searchFlight != null ? searchFlight : "" );
      out.write("\">\n");
      out.write("        <br>\n");
      out.write("        Search by Customer Name: <input type=\"text\" name=\"customerName\" value=\"");
      out.print( searchCustomer != null ? searchCustomer : "" );
      out.write("\">\n");
      out.write("        <br>\n");
      out.write("        <input type=\"submit\" value=\"Search Reservations\">\n");
      out.write("    </form>\n");
      out.write("\n");

    if ((searchFlight != null && !searchFlight.trim().isEmpty()) || (searchCustomer != null && !searchCustomer.trim().isEmpty())) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/airlineproj", "root", "parshva123");

            String sql = "SELECT f.flightNum, u.firstName, u.lastName, ft.seat, ft.class, ft.totalFare " +
                         "FROM FlightTicket ft " +
                         "JOIN Flight f ON ft.flightID = f.flightID " +
                         "JOIN CustomerAccount ca ON ft.accountID = ca.accountID " +
                         "JOIN User u ON ca.userID = u.userID " +
                         "WHERE 1=1 ";

            if (searchFlight != null && !searchFlight.trim().isEmpty()) {
                sql += "AND f.flightNum LIKE ? ";
            }
            if (searchCustomer != null && !searchCustomer.trim().isEmpty()) {
                sql += "AND CONCAT(u.firstName, ' ', u.lastName) LIKE ? ";
            }

            pstmt = conn.prepareStatement(sql);

            int paramIndex = 1;
            if (searchFlight != null && !searchFlight.trim().isEmpty()) {
                pstmt.setString(paramIndex++, "%" + searchFlight + "%");
            }
            if (searchCustomer != null && !searchCustomer.trim().isEmpty()) {
                pstmt.setString(paramIndex++, "%" + searchCustomer + "%");
            }

            rs = pstmt.executeQuery();

      out.write("\n");
      out.write("\n");
      out.write("    <h3>Search Results:</h3>\n");
      out.write("    <table border=\"1\">\n");
      out.write("        <tr>\n");
      out.write("            <th>Flight Number</th>\n");
      out.write("            <th>Customer Name</th>\n");
      out.write("            <th>Seat</th>\n");
      out.write("            <th>Class</th>\n");
      out.write("            <th>Total Fare</th>\n");
      out.write("        </tr>\n");
      out.write("        ");

            boolean hasResults = false;
            while(rs.next()) {
                hasResults = true;
        
      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td>");
      out.print( rs.getString("flightNum") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getString("firstName") );
      out.write(' ');
      out.print( rs.getString("lastName") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getString("seat") );
      out.write("</td>\n");
      out.write("            <td>");
      out.print( rs.getString("class") );
      out.write("</td>\n");
      out.write("            <td>$");
      out.print( rs.getDouble("totalFare") );
      out.write("</td>\n");
      out.write("        </tr>\n");
      out.write("        ");

            }
            if (!hasResults) {
        
      out.write("\n");
      out.write("        <tr><td colspan=\"5\">No reservations found.</td></tr>\n");
      out.write("        ");

            }
        
      out.write("\n");
      out.write("    </table>\n");
      out.write("\n");

        } catch(Exception e) {
            out.println("<p>Error: " + e.getMessage() + "</p>");
            e.printStackTrace();
        } finally {
            if(rs != null) try { rs.close(); } catch(Exception e) {}
            if(pstmt != null) try { pstmt.close(); } catch(Exception e) {}
            if(conn != null) try { conn.close(); } catch(Exception e) {}
        }
    }

      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
